---
import Layout from '~/layouts/PageLayout.astro';
import StatCard from '~/components/ui/StatCard.astro';
import CategoryAccordion from '~/components/ui/CategoryAccordion.astro';
import BlogCardGrid from '~/components/ui/BlogCardGrid.astro';
import CategoryNav from '~/components/ui/CategoryNav.astro';
import {getBlogPosts} from '~/utils/contents/unified-content';
import { Icon } from 'astro-icon/components';
import type { BlogPost } from '@/types/blog';
import { cn } from '~/utils/utils';

// 获取博客列表
const blogList = await getBlogPosts();

// 处理分类和子分类
type ProcessedBlogList = Record<string, (BlogPost & { subCategory?: string })[]>;

const processedBlogList = Object.entries(blogList).reduce((acc, [category, blogs]) => {
    // 检查是否有斜杠来标识子分类
    const categoryParts = category.split('/').map(part => part.trim());
    const mainCategory = categoryParts[0];
    const subCategory = categoryParts.length > 1 ? categoryParts[1] : undefined;
    
    if (!acc[mainCategory]) {
        acc[mainCategory] = [];
    }
    
    // 将博客添加到主分类下，并标记子分类
    blogs.forEach(blog => {
        acc[mainCategory].push({
            ...blog,
            subCategory: subCategory
        });
    });
    
    return acc;
}, {} as ProcessedBlogList);

// 创建分类导航数据
const categories = Object.keys(processedBlogList).map((category, index) => ({
    name: category,
    id: index.toString()
}));

// 计算总博客数
const totalBlogs = Object.values(processedBlogList).flat().length;

const metadata = {
    title: '博客列表',
    description: '博客列表',
    openGraph: {
        type: 'article'
    }
};
---

<Layout metadata={metadata}>
    <section class="py-8 sm:py-12 bg-gray-50/70 dark:bg-gray-900/30 min-h-screen">
        <div class={cn(
            "container mx-auto px-4",
            "min-h-[calc(100vh-240px)] pb-[60px]"
        )}>
            <div class="w-full md:flex md:flex-row md:gap-6">
                {/* 分类导航 */}
                <CategoryNav categories={categories} />
                
                <div class="flex-1 w-full md:max-w-[calc(100%-280px)]">
                    {/* 博客列表标题 */}
                    <div class="mb-4 sm:mb-6 mt-6 sm:mt-8 md:mt-0">
                        <h1 class="text-3xl font-bold mb-1 dark:text-white">
                            博客文章
                        </h1>
                        <div class="flex items-center text-gray-600 dark:text-gray-400 text-sm sm:text-base">
                            <span>共 {totalBlogs} 篇文章</span>
                            {categories.length > 0 && (
                                <span class="mx-2">·</span>
                                <span>{categories.length} 个分类</span>
                            )}
                        </div>
                    </div>

                    {/* 循环渲染分类和对应的博客 */}
                    {categories.map((category, index) => (
                        <div class="mb-10 sm:mb-12" id={`category-${category.id}`}>
                            <CategoryAccordion title={category.name} defaultOpen={index === 0}>
                                <BlogCardGrid 
                                    blogs={processedBlogList[category.name] || []} 
                                    columns={processedBlogList[category.name].length > 3 ? 2 : 1}
                                    showSubCategories={true}
                                />
                            </CategoryAccordion>
                        </div>
                    ))}
                </div>
            </div>

            <div class="mt-8 sm:mt-10 flex justify-center">
                <a 
                    href="#" 
                    class="flex items-center gap-1 px-3 py-1.5 sm:px-4 sm:py-2 bg-gray-100/70 dark:bg-gray-800/50 text-gray-700 dark:text-gray-300 text-sm rounded-full hover:bg-gray-200 dark:hover:bg-gray-800/80 transition-colors"
                    onclick="window.scrollTo({top: 0, behavior: 'smooth'}); return false;"
                >
                    <Icon name="tabler:arrow-up" class="w-3 h-3 sm:w-4 sm:h-4" />
                    返回顶部
                </a>
            </div>
        </div>
    </section>
</Layout>

<script>
// 根据URL hash自动打开对应分类
document.addEventListener('DOMContentLoaded', () => {
    const hash = window.location.hash;
    if (hash) {
        const targetAccordion = document.querySelector(hash);
        if (targetAccordion) {
            // 找到对应的accordion并打开
            const accordionBody = targetAccordion.querySelector('[data-accordion-body]');
            const accordionIcon = targetAccordion.querySelector('[data-accordion-icon]');
            
            if (accordionBody instanceof HTMLElement && accordionIcon) {
                accordionBody.style.maxHeight = "";
                accordionIcon.classList.add('rotate-180');
                
                // 滚动到目标位置
                setTimeout(() => {
                    const yOffset = -100;
                    const y = targetAccordion.getBoundingClientRect().top + window.pageYOffset + yOffset;
                    window.scrollTo({top: y, behavior: 'smooth'});
                }, 100);
            }
        }
    }
});
</script>

<style>
/* 修复闪白问题 */
:global(html) {
    background-color: var(--bg-color, #f9fafb);
}

:global(html.dark) {
    background-color: var(--bg-color-dark, #111827);
}

/* 确保页面最小高度，避免内容过少时的布局问题 */
section {
    min-height: calc(100vh - 240px);
    padding-bottom: 60px; /* 增加底部空间，防止导航与footer重叠 */
}

/* 在大屏幕上限制内容区域最大宽度 */
@media (min-width: 1536px) {
    .container {
        max-width: 1400px;
    }
}

/* 移动端优化 */
@media (max-width: 639px) {
    /* 优化卡片网格间距 */
    [class*="grid gap-4"] {
        gap: 0.75rem;
    }
    
    /* 减少子分类标题的上下边距 */
    .mb-8.last\:mb-0 {
        margin-bottom: 1.5rem;
    }
    
    /* 减小底部空间 */
    .mt-8 {
        margin-top: 1.5rem;
    }
}

/* 自定义滚动条 */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}
::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 10px;
}
::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 0, 0, 0.3);
}
.dark ::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
}
.dark ::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
}
.dark ::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

/* 修复主题切换时的闪烁问题 */
@media (prefers-color-scheme: light) {
    :root:not(.dark) section {
        transition: background-color 0.3s ease;
    }
}

@media (prefers-color-scheme: dark) {
    :root.dark section {
        transition: background-color 0.3s ease;
    }
}
</style>
