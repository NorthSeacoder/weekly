---
import Tooltip from './Tooltip.astro'; // 引入 Tooltip 组件
import { cn } from '~/utils/utils';
import { themes } from '~/utils/theme';
interface TooltipProps {
    maxWidth?: string;
    columns?: number;
    position?: 'top' | 'bottom' | 'left' | 'right';
}

interface TagProps {
    tags?: string[];
    maxVisible?: number;
    tooltipProps?: TooltipProps;
    compact?: boolean;
}

const { 
    tags = [], 
    maxVisible = 2,
    tooltipProps = {},
    compact = false
} = Astro.props as TagProps;

// 首先计算可见和剩余标签
const visibleTags = tags.slice(0, maxVisible);
const remainingTags = tags.slice(maxVisible);


const getRandomTheme = (excludeThemes: string[] = []) => {
    const availableThemes = Object.keys(themes).filter(t => !excludeThemes.includes(t));
    if (availableThemes.length === 0) {
        return Object.keys(themes)[Math.floor(Math.random() * Object.keys(themes).length)];
    }
    return availableThemes[Math.floor(Math.random() * availableThemes.length)];
};

// 用于存储已使用的主题
const usedThemes: string[] = [];

// 为每个可见标签生成主题，如果所有主题都被使用过，则重新开始
const tagThemes = visibleTags.map(() => {
    if (usedThemes.length === Object.keys(themes).length) {
        usedThemes.length = 0; // 重置已使用的主题
    }
    let theme = getRandomTheme(usedThemes);
    usedThemes.push(theme);
    return theme;
});

const baseTagClasses = cn(
    compact ? 'text-[10px] px-1.5 py-0' : 'text-xs px-2 py-0.5',
    'rounded border backdrop-blur-sm transition-all duration-300 hover:scale-105'
);

const remainingTagClasses = cn(
    compact ? 'text-[10px] px-1.5 py-0' : 'text-xs px-2 py-0.5',
    'rounded bg-gradient-to-br from-gray-500/10 to-gray-500/5',
    'text-gray-400 border border-gray-500/20',
    'backdrop-blur-sm hover:from-gray-500/20 hover:to-gray-500/10',
    'transition-all duration-300'
);
---

<div class={`flex flex-wrap ${compact ? 'gap-1.5' : 'gap-2'} items-center`} data-name="tags-container">
    {visibleTags.map((tag, index) => (
        <span
            class={cn(baseTagClasses, themes[tagThemes[index]])}
            data-name={`tag-${index}`}
            data-theme={tagThemes[index]}
        >
            {tag}
        </span>
    ))}

    {remainingTags.length > 0 && (
        <span class={remainingTagClasses} data-name="remaining-tags-count">
            +{remainingTags.length}
        </span>
    )}
</div> 