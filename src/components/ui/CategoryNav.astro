---
import { cn } from '~/utils/utils';
import { Icon } from 'astro-icon/components';

interface Category {
  name: string;
  id: string;
}

interface Props {
  categories: Category[];
  className?: string;
  layout?: 'horizontal' | 'sidebar';
}

const { categories = [], className = '', layout = 'sidebar' } = Astro.props;

// 移动端下拉菜单样式
const dropdownButtonClass = cn(
  'flex items-center gap-1 px-3 py-1.5 text-sm font-medium',
  'rounded-lg border border-gray-200/80 dark:border-gray-700/40',
  'bg-gray-50/70 text-gray-700 hover:bg-gray-100 hover:text-gray-800',
  'dark:bg-gray-900/30 dark:text-gray-300 dark:hover:bg-gray-900/60 dark:hover:text-white',
  'backdrop-blur-sm',
  'w-full md:hidden', // 只在移动端显示下拉按钮
);

const dropdownMenuClass = cn(
  'absolute left-0 top-full mt-1 max-h-60 w-full overflow-y-auto rounded-lg',
  'py-1 px-1 border border-gray-200/80 dark:border-gray-700/40',
  'bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm z-40',
  'shadow-lg hidden',
  'scrollbar-thin'
);

// 按钮样式
const buttonClasses = cn(
  'px-3 py-1.5 text-sm font-medium rounded-lg whitespace-nowrap w-full text-left',
  'flex items-center gap-1',
  'transition-all duration-300 ease-in-out',
  'border-b border-gray-100/80 dark:border-gray-800/60 last:border-0',
  'hover:bg-gray-100/80 hover:text-gray-800',
  'dark:hover:bg-gray-800/80 dark:hover:text-white'
);

// 侧边栏样式
const sidebarClasses = cn(
  'h-full sticky max-h-screen-minus-footer top-24 sm:top-28 w-full md:w-64 z-30 transition-all duration-300',
  'py-2 sm:py-3 px-2 sm:px-3 bg-transparent backdrop-blur-sm',
  'rounded-lg border border-gray-200/80 dark:border-gray-700/40',
  'scrollbar-thin',
  'flex-shrink-0 mb-0 md:mr-6',
  'hidden md:block', // 在移动端隐藏侧边栏
  className
);

// 标题样式
const titleClasses = 'flex items-center font-semibold text-gray-700 dark:text-gray-300';

// 获取当前激活的分类名称
const activeCategory = categories.length > 0 ? categories[0].name : '全部分类';
---

{/* 移动端下拉菜单 */}
<div class="relative w-full mb-4 sticky top-20 sm:top-24 z-30 md:hidden" data-name="categoryNav-mobile">
  {/* 移动端下拉按钮 */}
  <button 
    type="button"
    class={dropdownButtonClass}
    data-dropdown-toggle="true"
    aria-expanded="false"
    aria-label="打开分类菜单"
    onclick="toggleDropdownMenu()"
  >
    <Icon name="tabler:folder" class="w-4 h-4" />
    <span class="flex-grow truncate text-left mr-1" data-current-category>{activeCategory}</span>
    <Icon name="tabler:chevron-down" class="w-4 h-4 transition-transform" data-dropdown-icon />
  </button>
  
  {/* 移动端下拉菜单 */}
  <div class={dropdownMenuClass} data-dropdown-menu>
    {categories.map((category, index) => (
      <a 
        href={`#category-${category.id}`} 
        class={buttonClasses}
        data-category-nav-item
        data-active={index === 0 ? "true" : "false"}
        data-category-name={category.name}
      >
        <Icon name="tabler:folder" class="w-4 h-4 flex-shrink-0" />
        <span class="truncate">{category.name}</span>
        {index === 0 && (
          <Icon name="tabler:check" class="w-4 h-4 ml-auto text-blue-500 dark:text-blue-400" data-active-icon />
        )}
      </a>
    ))}
  </div>
</div>

{/* PC端侧边栏导航 */}
<div class={sidebarClasses} data-name="categoryNav-sidebar" data-layout="sidebar">
  <div class="flex flex-col w-full">
    <div class="flex items-center mb-2 text-gray-600 dark:text-gray-400 px-1 sm:px-2 text-xs sm:text-sm">
      <Icon name="tabler:folder" class="w-3 h-3 sm:w-4 sm:h-4 mr-0.5 sm:mr-1" />
      <span class="font-semibold">分类导航</span>
    </div>
    <div class="overflow-y-auto max-h-[calc(100vh-220px)] sm:max-h-[calc(100vh-250px)] px-0.5">
      {categories.map((category, index) => (
        <a 
          href={`#category-${category.id}`} 
          class={cn(
            'px-2 sm:px-2.5 py-1 sm:py-1.5 text-xs sm:text-sm font-medium rounded-md whitespace-nowrap w-full',
            'flex items-center gap-1',
            'transition-all duration-300 ease-in-out mb-1 sm:mb-1.5 last:mb-0',
            'border border-gray-200/80 dark:border-gray-700/40',
            'bg-gray-50/70 text-gray-700 hover:bg-gray-100 hover:text-gray-800',
            'dark:bg-gray-900/30 dark:text-gray-300 dark:hover:bg-gray-900/60 dark:hover:text-white'
          )}
          data-category-nav-item-sidebar
          data-active={index === 0 ? "true" : "false"}
          data-category-name={category.name}
        >
          <Icon name="tabler:folder" class="w-3 h-3 sm:w-4 sm:h-4" />
          <span class="truncate">{category.name}</span>
        </a>
      ))}
    </div>
  </div>
</div>

<style>
  /* 自定义滚动条 */
  .scrollbar-thin::-webkit-scrollbar {
    height: 4px;
    width: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 10px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 10px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 0, 0, 0.3);
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  /* 修复闪白问题 */
  html {
    background-color: var(--bg-color, #f9fafb);
  }
  
  html.dark {
    background-color: var(--bg-color-dark, #111827);
  }
  
  /* 防止侧边栏滚动到footer */
  .max-h-screen-minus-footer {
    max-height: calc(100vh - 240px);
  }
  
  /* 确保暗色模式下边框可见 */
  .dark [data-dropdown-toggle],
  .dark [data-dropdown-menu],
  .dark [data-category-nav-item] {
    border-color: rgba(75, 85, 99, 0.4);
  }
  
  /* 修复主题切换时的闪烁问题 */
  @media (prefers-color-scheme: light) {
    :root:not(.dark) [data-category-nav-item] {
      transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
    }
  }
  
  @media (prefers-color-scheme: dark) {
    :root.dark [data-category-nav-item] {
      transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
    }
  }
  
  /* 确保按钮不超出容器 */
  [data-name="categoryNav-sidebar"] {
    padding: 8px 8px;
  }
  
  @media (min-width: 640px) {
    [data-name="categoryNav-sidebar"] {
      padding: 12px 12px;
    }
  }
  
  /* 移动设备导航优化 */
  @media (max-width: 767px) {
    /* 活动项高亮 */
    [data-active="true"] {
      background-color: rgba(243, 244, 246, 0.8);
    }
    
    .dark [data-active="true"] {
      background-color: rgba(31, 41, 55, 0.8);
    }
    
    /* 下拉菜单显示时的遮罩 */
    .dropdown-backdrop {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: rgba(0, 0, 0, 0.3);
      z-index: 30;
    }
  }
  
  /* 下拉菜单打开时的样式 */
  [aria-expanded="true"] [data-dropdown-icon] {
    transform: rotate(180deg);
  }
</style>

<script is:inline>
  // 设置背景色变量，用于修复闪白问题
  document.documentElement.style.setProperty('--bg-color', '#f9fafb');
  document.documentElement.style.setProperty('--bg-color-dark', '#111827');
  
  // 全局函数用于切换下拉菜单
  function toggleDropdownMenu() {
    const dropdownToggle = document.querySelector('[data-dropdown-toggle]');
    const dropdownMenu = document.querySelector('[data-dropdown-menu]');
    const dropdownIcon = document.querySelector('[data-dropdown-icon]');
    
    if (!dropdownToggle || !dropdownMenu) return;
    
    const isExpanded = dropdownToggle.getAttribute('aria-expanded') === 'true';
    const newState = !isExpanded;
    
    dropdownToggle.setAttribute('aria-expanded', newState);
    
    if (newState) {
      dropdownMenu.classList.remove('hidden');
      if (dropdownIcon) dropdownIcon.style.transform = 'rotate(180deg)';
      
      // 创建背景遮罩
      const backdrop = document.createElement('div');
      backdrop.classList.add('dropdown-backdrop');
      backdrop.setAttribute('data-dropdown-backdrop', '');
      document.body.appendChild(backdrop);
      
      backdrop.addEventListener('click', function() {
        toggleDropdownMenu();
      });
    } else {
      dropdownMenu.classList.add('hidden');
      if (dropdownIcon) dropdownIcon.style.transform = '';
      
      // 移除背景遮罩
      const backdrop = document.querySelector('[data-dropdown-backdrop]');
      if (backdrop) backdrop.remove();
    }
  }
  
  // 初始化下拉菜单和分类导航
  function initCategoryNav() {
    // 处理下拉菜单中的分类点击
    const dropdownItems = document.querySelectorAll('[data-category-nav-item]');
    dropdownItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        
        // 更新活动状态
        dropdownItems.forEach(dropdownItem => {
          dropdownItem.setAttribute('data-active', 'false');
          // 移除选中图标
          const activeIcon = dropdownItem.querySelector('[data-active-icon]');
          if (activeIcon) activeIcon.remove();
        });
        
        item.setAttribute('data-active', 'true');
        
        // 添加选中图标
        const checkIcon = document.createElement('span');
        checkIcon.innerHTML = '<svg class="w-4 h-4 ml-auto text-blue-500 dark:text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
        checkIcon.setAttribute('data-active-icon', '');
        checkIcon.className = 'ml-auto';
        item.appendChild(checkIcon);
        
        // 更新当前显示的分类名称
        const categoryName = item.getAttribute('data-category-name');
        const currentCategoryEl = document.querySelector('[data-current-category]');
        if (currentCategoryEl && categoryName) {
          currentCategoryEl.textContent = categoryName;
        }
        
        // 关闭下拉菜单
        toggleDropdownMenu();
        
        // 滚动到目标分类
        const href = item.getAttribute('href');
        if (href) {
          navigateToCategory(href);
        }
      });
    });
    
    // 侧边栏导航项点击
    const sidebarItems = document.querySelectorAll('[data-category-nav-item-sidebar]');
    sidebarItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        
        // 更新活动状态
        sidebarItems.forEach(sidebarItem => {
          sidebarItem.setAttribute('data-active', 'false');
        });
        
        item.setAttribute('data-active', 'true');
        
        // 滚动到目标分类
        const href = item.getAttribute('href');
        if (href) {
          navigateToCategory(href);
        }
      });
    });
    
    // 通用导航到分类的函数
    function navigateToCategory(href) {
      const targetElement = document.querySelector(href);
      if (targetElement) {
        // 获取header高度并加上一些额外空间
        const header = document.querySelector('header');
        const headerHeight = header ? header.offsetHeight + 16 : 90;
        
        // 平滑滚动到目标位置，并考虑顶部固定导航的高度
        const y = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight - 20;
        window.scrollTo({top: y, behavior: 'smooth'});
        
        // 打开目标分类
        const accordionBody = targetElement.querySelector('[data-accordion-body]');
        const accordionIcon = targetElement.querySelector('[data-accordion-icon]');
        
        if (accordionBody instanceof HTMLElement && accordionIcon) {
          accordionBody.style.maxHeight = "";
          accordionIcon.classList.add('rotate-180');
        }
        
        // 更新URL hash但不触发滚动
        history.pushState(null, '', href);
      }
    }
    
    // 检测滚动，防止侧边栏覆盖footer
    function adjustNavOnScroll() {
      const sidebarNav = document.querySelector('[data-name="categoryNav-sidebar"]');
      if (!sidebarNav) return;
      
      const footer = document.querySelector('footer');
      if (!footer) return;
      
      const header = document.querySelector('header');
      const headerHeight = header ? header.offsetHeight + 8 : 72;
      
      // 更新顶部位置
      if (window.innerWidth >= 768) { // 只在桌面版调整
        sidebarNav.style.top = `${headerHeight}px`;
      }
      
      const footerTop = footer.getBoundingClientRect().top;
      const windowHeight = window.innerHeight;
      
      if (footerTop < windowHeight) {
        // 如果footer可见，调整sidebar的位置避免重叠
        const overlap = windowHeight - footerTop;
        sidebarNav.style.top = `calc(${headerHeight}px - ${overlap}px)`;
      }
    }
    
    // 监听滚动事件
    window.addEventListener('scroll', adjustNavOnScroll);
    window.addEventListener('resize', adjustNavOnScroll);
    
    // 初始运行一次
    adjustNavOnScroll();
    
    // 处理滚动位置，确定当前活动的分类
    function updateActiveCategory() {
      const categories = document.querySelectorAll('[id^="category-"]');
      if (categories.length === 0) return;
      
      const header = document.querySelector('header');
      const offset = (header ? header.offsetHeight : 0) + 50;
      
      let activeCategory = null;
      
      // 找到当前在视口中的分类
      categories.forEach((category) => {
        const rect = category.getBoundingClientRect();
        if (rect.top <= offset && rect.bottom > 0) {
          activeCategory = category;
        }
      });
      
      if (activeCategory) {
        const categoryId = activeCategory.id;
        
        // 更新下拉菜单中的当前分类
        const dropdownItems = document.querySelectorAll('[data-category-nav-item]');
        dropdownItems.forEach(item => {
          const href = item.getAttribute('href');
          if (href === `#${categoryId}`) {
            item.setAttribute('data-active', 'true');
            const categoryName = item.getAttribute('data-category-name');
            const currentCategoryEl = document.querySelector('[data-current-category]');
            if (currentCategoryEl && categoryName) {
              currentCategoryEl.textContent = categoryName;
            }
            
            // 添加选中图标
            let activeIcon = item.querySelector('[data-active-icon]');
            if (!activeIcon) {
              activeIcon = document.createElement('span');
              activeIcon.innerHTML = '<svg class="w-4 h-4 ml-auto text-blue-500 dark:text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
              activeIcon.setAttribute('data-active-icon', '');
              activeIcon.className = 'ml-auto';
              item.appendChild(activeIcon);
            }
          } else {
            item.setAttribute('data-active', 'false');
            // 移除选中图标
            const activeIcon = item.querySelector('[data-active-icon]');
            if (activeIcon) activeIcon.remove();
          }
        });
        
        // 更新侧边栏中的当前分类
        const sidebarItems = document.querySelectorAll('[data-category-nav-item-sidebar]');
        sidebarItems.forEach(item => {
          const href = item.getAttribute('href');
          if (href === `#${categoryId}`) {
            item.setAttribute('data-active', 'true');
          } else {
            item.setAttribute('data-active', 'false');
          }
        });
      }
    }
    
    // 添加滚动监听以更新活动分类
    let scrollTimer;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimer);
      scrollTimer = setTimeout(updateActiveCategory, 100);
    });
  }
  
  // 页面加载后初始化
  document.addEventListener('DOMContentLoaded', initCategoryNav);
  
  // Astro View Transitions 支持
  document.addEventListener('astro:page-load', initCategoryNav);
</script> 